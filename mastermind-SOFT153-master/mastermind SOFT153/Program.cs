using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace mastermind_SOFT153
{
    class Program
    {
        /// <summary>
        /// A game of mastermind where the player faces a computer generated code
        /// </summary>
        static void Main(string[] args)
        {
            int n, m; // n is the length and m is the range

            Console.WriteLine("\nSoft 153 Mastermind");
            Console.WriteLine("==================================================================");
            Console.Write("\nPlease enter how long you would like the code to be: ");
            n = Convert.ToInt32(Console.ReadLine()); // Retrieve the desired length of code

            Console.Write("How many values would like available (standard is 6): ");
            m = Convert.ToInt32(Console.ReadLine()); // retrieve the desired range of options

            MainGameLoop(n, m);     // Enter main loop after asking user for variables
        }

        /// <summary>
        /// Generate the code and compare user guesses to it until they win - then ask for restart
        /// </summary>
        /// <param name="n"> length of code </param>
        /// <param name="m"> range of values available </param>
        static void MainGameLoop(int n, int m)
        {
            bool isCorrect = false;     // Whether or not the users guess was correct
            string restartChoice;       // A letter that represents whether or not the player wishes to restart
            int[] hiddenCode = new int[n];      // The code generated by the computer which the player is trying to match
            int[] guessedCode = new int[n];     // The code being proposed by the player

            bool debug = true;      // Whether or not debug mode is active (shows code that is being aimed for)

            do
            {
                isCorrect = false;
               
                GenerateSecretCode(n, m, ref hiddenCode);       // Create a code to try and guess

                if(debug)       // Print out the secret code
                {
                    Console.Write("\n### DEBUG ### ");
                    for(int i = 0; i < n; i++)
                    {
                        Console.Write(hiddenCode[i]);
                    }
                    Console.Write("\n\n");
                }

                while(!isCorrect)       // While the player has not yet guessed correctly
                {
                    PlayerTurn(n, m, ref guessedCode, debug);      // Get a guess from the player
                    EvaluatePlayerTurn(guessedCode, hiddenCode, n, ref isCorrect);
                }

                Console.Write("\n\nWould you like to play again? (y/n)  ");
                restartChoice = Console.ReadLine();

                //ClearAll();

            } while (restartChoice == "y");
        }

        /// <summary>
        /// Creates a secret code of desired length and range
        /// </summary>
        /// <param name="length"> n </param>
        /// <param name="range"> m </param>
        /// <param name="hiddenCode"> The code to be created, this is a ref so it will affect the variable in the original method </param>
        static void GenerateSecretCode(int length, int range, ref int[] hiddenCode)
        {
            Random r = new Random();

            for(int i = 0; i < length; i++)
            {
                hiddenCode[i] = r.Next(1, range + 1);
            }
        }

        /// <summary>
        /// Takes a guess from the player
        /// </summary>
        /// <param name="length"> length of code </param>
        /// <param name="range"> max possible value </param>
        /// <param name="emptyPlayerCode"> reference to the previously created player code </param>
        static void PlayerTurn(int length, int range, ref int[] emptyPlayerCode, bool debug)
        {
            int temp;       // Holds the value entered by the player before it is saved into the array

            //ClearEntryArea(length, debug);

            Console.ForegroundColor = ConsoleColor.Green;
            Console.Write("\nTime to make your guess...\n\n");
            Console.ResetColor();

            for (int i = 0; i < length; i++)        // Retrieves each number of the guess individually
            {
                Console.WriteLine("Please enter a value between 1 and {0}: ", range);
                temp = Convert.ToInt32(Console.ReadLine());

                emptyPlayerCode[i] = temp;
            }

            //Console.WriteLine("Please enter your {0} digit code", length);
            //temp = Console.ReadLine();
            //temp.ToCharArray();

            //for (int i = 0; i < length; i++)        // Retrieves each number of the guess individually
            //{
            //    emptyPlayerCode[i] = Convert.ToInt32(temp[i]);
            //}
        }

        /// <summary>
        /// Looks at the players guess and determines how many black pegs and how many white pegs should be given
        /// </summary>
        /// <param name="guessedCode"> The code provided by the player </param>
        /// <param name="hiddenCode"> The code that the player is trying to guess </param>
        /// <param name="n"> The length of the code </param>
        /// <param name="isCorrect"> Whether or not the current guess is correct </param>
        static void EvaluatePlayerTurn(int[] guessedCode, int[] hiddenCode, int n, ref bool isCorrect)
        {
            int b = 0;      // Initialise number of each colour peg
            int w = 0;
           
            Console.Write("\n");

            for (int i = 0; i < n; i++)     // Goes through the entire guessed code one by one
            {
                if (guessedCode[i] == hiddenCode[i])        // If the numbers match, a black peg is awarded
                {
                    b++;
                    guessedCode[i] = 0;     // To prevent the digit being counted again, it is set to 0
                    Console.Write("| Black Peg | ");
                }
                else
                {
                    for (int j = 0; j < n; j++)     // Loop through again, this checks to see if the guessed digit is present but in a different location
                    {
                        if (guessedCode[j] == hiddenCode[i])
                        {
                            guessedCode[i] = 0;
                            w++;
                            Console.Write("| White Peg | ");
                        }
                    }
                }
            }

            Console.Write("\n");

            if (b == n)     // If the number of black pegs equals the length of the code, the player has won
            {
                isCorrect = true;
                Console.WriteLine("\nCongratulations!");
            }
        }

        /// <summary>
        /// This clears the region of the console where the player inputs their guess
        /// </summary>
        /// <param name="numberOfEntries"> The length of the code </param>
        /// <param name="debug"> Whether or not debug mode is active </param>
        static void ClearEntryArea(int numberOfEntries, bool debug)
        {
            int topOfSelection;

            if(debug)
            {
                topOfSelection = 9;
            }
            else
            {
                topOfSelection = 6;
            }

            Console.SetCursorPosition(0, topOfSelection);

            for (int i = 0; i < numberOfEntries * 2 + 2; i++)
            {
                Console.Write(new string(' ', Console.WindowWidth));
            }

            Console.SetCursorPosition(0, topOfSelection);
        }

        /// <summary>
        /// Clears the whole game screen except the length and range selection
        /// </summary>
        static void ClearAll()
        {
            int topOfSelection = 6;

            Console.SetCursorPosition(0, topOfSelection);

            for (int i = 0; i < 30; i++)
            {
                Console.Write(new string(' ', Console.WindowWidth));
            }

            Console.SetCursorPosition(0, topOfSelection);
        }
    }
}
